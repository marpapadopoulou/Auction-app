{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBid","highestBidder","userBalances","accounts","contract","input","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","call","highestBid_response","highestBidder_response","userBalances_response","setState","alert","error","bid","send","from","value","highestbid","highestbidder","withdraw","getHighestBid","response","getHighestBidder","myChangeHandler","event","target","this","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.126eefba.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport AuctionContract from \"./contracts/Auction.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { highestBid: 0,highestBidder: null, userBalances: 0, web3: null, accounts: null, contract: null, input: \"\" };\r\n\r\n  \r\n\r\n\r\n\r\ncomponentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = AuctionContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        AuctionContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n      \r\nconst highestBid_response= await instance.methods.highestBid().call();\r\n\r\nconst highestBidder_response= await instance.methods.highestBidder().call();\r\n\r\nconst userBalances_response= await instance.methods.userBalances(accounts[0]).call();\r\n\r\n\r\n      this.setState({ web3, accounts, contract: instance, highestBid: highestBid_response, highestBidder: highestBidder_response, userBalances: userBalances_response });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  bid = async () => {\r\n    const { accounts, contract, web3 } = this.state;\r\n\r\n    // bids the value\r\n    await contract.methods.bid().send({ from: accounts[0], value: this.state.input });\r\n\r\n\t\r\n    const highestbid = await contract.methods.highestBid().call();\r\n    \r\n    const highestbidder = await contract.methods.highestBidder().call();\r\n\r\n\tthis.setState({highestBid: highestbid, highestBidder: highestbidder, userBalances:this.state.input});\r\n  };\r\n\r\n\r\n\r\n withdraw = async () => {\r\n    const { accounts, contract } = this.state;\r\n\r\n    await contract.methods.withdraw().send({ from: accounts[0]});\r\n    \r\n    const highestbid = await contract.methods.highestBid().call();\r\n    \r\n    const highestbidder = await contract.methods.highestBidder().call();\r\n    \r\n    this.setState({highestBid: highestbid,  highestBidder: highestbidder, userBalances: 0});\r\n  };\r\n\r\n\r\n\r\n getHighestBid = async (input) => {\r\n    const { accounts, contract } = this.state;\r\n\r\n    const response = await contract.methods.getHighestBid.call();\r\n    this.setState({highestBid: response});\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n getHighestBidder = async (input) => {\r\n    const { accounts, contract } = this.state;\r\n\r\n    const response = await contract.methods.getHighestBidder.call();\r\n    this.setState({highestBidder: response});\r\n      };\r\n\r\n\r\nmyChangeHandler = (event) => {\r\n    this.setState({input: event.target.value});\r\n}\r\n\r\n  \r\n\r\n\r\nrender() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Auction Smart Contract Dapp!</h1>\r\n        <div>The highest bid is: {this.state.highestBid}</div>\r\n\t  <div>The highest bidder is: {this.state.highestBidder}</div>\r\n\r\n\r\n\t  <h3>Information about you:</h3>\r\n        <div>Your bid: {this.state.userBalances}</div>\r\n        \r\n\t < input type=\"text\" onChange={this.myChangeHandler}/>\r\n\t<button onClick={this.bid}> Bid here </button>\r\n\t <br></br>\r\n\t<button onClick={this.withdraw}> Withdraw here </button>\r\n\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}